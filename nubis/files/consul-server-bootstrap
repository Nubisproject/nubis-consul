#!/bin/bash
# shellcheck disable=SC1117

# /usr/local/bin isn't set yet in our PATH
export PATH=/usr/local/bin:$PATH

eval "$(nubis-metadata)"

REGION=$(nubis-region)

CONSUL_DC="${NUBIS_ARENA}-${REGION}-${NUBIS_ACCOUNT}"

if [ "$CONSUL_BOOTSTRAP_EXPECT" ]; then
cat <<EOF > /etc/consul/zzz-bootstrap.json
{
  "bootstrap_expect": $CONSUL_BOOTSTRAP_EXPECT
}
EOF
fi

cat <<EOF > /etc/consul/ec2_join.json
{
  "retry_join_ec2": {
    "tag_key": "ConsulClusterName",
    "tag_value": "consul-server-${NUBIS_ARENA}"
  }
}
EOF

# Grab the master ACL token from credstash (if not in user-data)
if [ ! "$CONSUL_MASTER_ACL_TOKEN" ]; then
  CONSUL_MASTER_ACL_TOKEN=$(nubis-secret get master_acl_token)
fi

if [ "$CONSUL_MASTER_ACL_TOKEN" ]; then

  # Default to allow all
  if [ -z "$CONSUL_ACL_DEFAULT_POLICY" ]; then
    CONSUL_ACL_DEFAULT_POLICY="allow"
  fi

  # default to cached (and maybe stale) ACLs
  if [ -z "$CONSUL_ACL_DOWN_POLICY" ]; then
    CONSUL_ACL_DOWN_POLICY="extend-cache"
  fi

cat <<EOF > /etc/consul/zzz-acl.json
{
  "acl_datacenter": "$CONSUL_DC",
  "acl_master_token": "$CONSUL_MASTER_ACL_TOKEN",
  "acl_default_policy": "$CONSUL_ACL_DEFAULT_POLICY",
  "acl_down_policy": "$CONSUL_ACL_DOWN_POLICY"
}
EOF

# Create the ACLs, and since we are blacklisting for now, we don't need
# to be very specific, the Platform token gets *.* since we allow by default,
# and it's the anonymous one that gets denied explicitely. Will need inverting

cat <<EOF > /etc/consul/acl.pp
consul_acl { "Nubis Platform":
  ensure => 'present',
  rules  => {},
  type   => 'client',
  acl_api_token => '$CONSUL_MASTER_ACL_TOKEN',
}

# XXX: Missing support for storage and mysql(bugzilla)
consul_acl { "Anonymous Token":
  ensure => 'present',
  rules  => {
    "key" => {
      "_rexec/" => {
        "policy" => "deny"
      },
      "arenas/" => {
        "policy" => "read"
      },
      "deploy/" => {
        "policy" => "deny"
      },
      "fluent" => {
        "policy" => "deny"
      },
      "proxy" => {
        "policy" => "deny"
      },
      "nat" => {
        "policy" => "deny"
      },
      "prometheus" => {
        "policy" => "deny"
      },
      "nubis" => {
        "policy" => "deny"
      },
      "consul-ready" => {
        "policy" => "read"
      }
    },
    "service" => {
      "fluentd" => {
        "policy" => "read"
      },
      "proxy" => {
        "policy" => "read"
      },
      "prometheus" => {
        "policy" => "read"
      },
      "alertmanager" => {
        "policy" => "read"
      },
      "traefik" => {
        "policy" => "read"
      },
      "es" => {
        "policy" => "read"
      },
      "grafana" => {
        "policy" => "read"
      },
      "sso" => {
        "policy" => "read"
      }    
    }
  },
  type   => 'client',
  acl_api_token => '$CONSUL_MASTER_ACL_TOKEN',
}
EOF
fi


# Grab the secret from credstash (if not in user-data)
if [ "$CONSUL_SECRET" ]; then
  echo "$CONSUL_SECRET" > /etc/consul/consul.secret
else
  SECRET=$(nubis-secret get secret)
  echo "$SECRET" > /etc/consul/consul.secret
fi

# Grab the cert from credstash (if not in user-data)
if [ "$CONSUL_CERT" ]; then
  echo "$CONSUL_CERT" | tr " " "\n" | perl -pe 's/--BEGIN\n/--BEGIN /g' | perl -pe 's/--END\n/--END /g' > /etc/consul/consul.pem
else
  CERT=$(nubis-secret get ssl/cert)
  echo "$CERT" > /etc/consul/consul.pem
fi

# Grab the key from credstash (if not in user-data)
if [ "$CONSUL_KEY" ]; then
  echo "$CONSUL_KEY" | tr " " "\n" | perl -pe 's/--(BEGIN|END)\n/--$1 /m' | perl -pe 's/ RSA\n/ RSA /g' | perl -pe 's/ PRIVATE\n/ PRIVATE /g' > /etc/consul/consul.key
else
  KEY=$(nubis-secret get ssl/key)
  echo "$KEY" > /etc/consul/consul.key
fi

# Ensure we don't auto-join anything, so create an auto-join skip marker
touch /etc/consul/zzz-join.skip
