#!/bin/bash -l
# Simple script that will backup consul

# Check pre-reqs
hash jq 2>/dev/null || echo "Please install jq to use this tool. https://github.com/stedolan/jq"
hash aws 2>/dev/null || echo "Please install the AWS CLI API to use this tool. https://aws.amazon.com/cli/"
hash curl 2>/dev/null || echo "Please install curl"

# Logging
LOGGER_BIN='/usr/bin/logger'
LOGGER="$LOGGER_BIN --priority local7.info --tag consul-backup"

# Get userdata
eval "$(nubis-metadata)"
INSTANCE_ID=$(curl -s -fq http://169.254.169.254/latest/meta-data/instance-id)
REGION=$(nubis-region)
BACKUP_BUCKET=$(nubis-metadata CONSUL_BACKUP_BUCKET)
CONSUL_ACL_TOKEN=$(jq -r .acl_master_token < /etc/consul/zzz-acl.json)

# How do we want to represent the backup file
DATE_STAMP=$(date +%Y%m%d_%H:%M:%S)
DATE_PATH=$(date +%Y/%m)
BACKUP_FILE_NAME="$DATE_PATH/consul_backup.${INSTANCE_ID}.${DATE_STAMP}.dump"

# Only 1 member of the cluster needs to run this
# if you are not the leader then just forget about it
consul-do "${NUBIS_PROJECT}/${NUBIS_ARENA}/backup" "${INSTANCE_ID}" || exit 0

# Backup to temporary file
BACKUP_FILE=$(mktemp)
trap 'rm -f "$BACKUP_FILE"' EXIT

# We probably can do a little better here to check if the backup actually worked
$LOGGER "Backing up KV store to $BACKUP_FILE"
consul snapshot save -token="$CONSUL_ACL_TOKEN" "$BACKUP_FILE"

# Copy to s3
if [[ -s $BACKUP_FILE ]]; then
    for DEST in ${BACKUP_FILE_NAME} latest.dump; do
        $LOGGER "Copying ${DEST} to s3 (BucketName: ${BACKUP_BUCKET})"
        aws s3 cp "$BACKUP_FILE" "s3://${BACKUP_BUCKET}/${DEST}" --region "${REGION}" --quiet
        RV=$?
        if [[ $RV -ne 0 ]]; then
            $LOGGER "Error: RV value is ${RV}, and unable to copy ${DEST} to s3 bucket"
        fi
    done
fi
